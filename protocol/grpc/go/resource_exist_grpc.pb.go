// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SiteServiceClient is the client API for SiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteServiceClient interface {
	IsExistResource(ctx context.Context, in *ExistSiteLineRequest, opts ...grpc.CallOption) (*ExistSiteLineResponse, error)
}

type siteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteServiceClient(cc grpc.ClientConnInterface) SiteServiceClient {
	return &siteServiceClient{cc}
}

func (c *siteServiceClient) IsExistResource(ctx context.Context, in *ExistSiteLineRequest, opts ...grpc.CallOption) (*ExistSiteLineResponse, error) {
	out := new(ExistSiteLineResponse)
	err := c.cc.Invoke(ctx, "/SiteService/isExistResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteServiceServer is the server API for SiteService service.
// All implementations must embed UnimplementedSiteServiceServer
// for forward compatibility
type SiteServiceServer interface {
	IsExistResource(context.Context, *ExistSiteLineRequest) (*ExistSiteLineResponse, error)
	mustEmbedUnimplementedSiteServiceServer()
}

// UnimplementedSiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSiteServiceServer struct {
}

func (*UnimplementedSiteServiceServer) IsExistResource(context.Context, *ExistSiteLineRequest) (*ExistSiteLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExistResource not implemented")
}
func (*UnimplementedSiteServiceServer) mustEmbedUnimplementedSiteServiceServer() {}

func RegisterSiteServiceServer(s *grpc.Server, srv SiteServiceServer) {
	s.RegisterService(&_SiteService_serviceDesc, srv)
}

func _SiteService_IsExistResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSiteLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).IsExistResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SiteService/IsExistResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).IsExistResource(ctx, req.(*ExistSiteLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SiteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SiteService",
	HandlerType: (*SiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isExistResource",
			Handler:    _SiteService_IsExistResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource.proto",
}
