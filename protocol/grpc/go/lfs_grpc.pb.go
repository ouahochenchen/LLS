// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LfsServiceClient is the client API for LfsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LfsServiceClient interface {
	CreateLineOrder(ctx context.Context, in *LfsRequest, opts ...grpc.CallOption) (*LfsResponse, error)
}

type lfsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLfsServiceClient(cc grpc.ClientConnInterface) LfsServiceClient {
	return &lfsServiceClient{cc}
}

func (c *lfsServiceClient) CreateLineOrder(ctx context.Context, in *LfsRequest, opts ...grpc.CallOption) (*LfsResponse, error) {
	out := new(LfsResponse)
	err := c.cc.Invoke(ctx, "/lfs.LfsService/CreateLineOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LfsServiceServer is the server API for LfsService service.
// All implementations must embed UnimplementedLfsServiceServer
// for forward compatibility
type LfsServiceServer interface {
	LfsRpc(context.Context, *LfsRequest) (*LfsResponse, error)
	mustEmbedUnimplementedLfsServiceServer()
}

// UnimplementedLfsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLfsServiceServer struct {
}

func (*UnimplementedLfsServiceServer) LfsRpc(context.Context, *LfsRequest) (*LfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLineOrder not implemented")
}
func (*UnimplementedLfsServiceServer) mustEmbedUnimplementedLfsServiceServer() {}

func RegisterLfsServiceServer(s *grpc.Server, srv LfsServiceServer) {
	s.RegisterService(&_LfsService_serviceDesc, srv)
}

func _LfsService_LfsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfsServiceServer).LfsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lfs.LfsService/CreateLineOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfsServiceServer).LfsRpc(ctx, req.(*LfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LfsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lfs.LfsService",
	HandlerType: (*LfsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLineOrder",
			Handler:    _LfsService_LfsRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lfs.proto",
}
